pycvodes
========

.. image:: http://hera.physchem.kth.se:9090/api/badges/bjodah/pycvodes/status.svg
   :target: http://hera.physchem.kth.se:9090/bjodah/pycvodes
   :alt: Build status
.. image:: https://img.shields.io/pypi/v/pycvodes.svg
   :target: https://pypi.python.org/pypi/pycvodes
   :alt: PyPI version
.. image:: https://img.shields.io/pypi/l/pycvodes.svg
   :target: https://github.com/bjodah/pycvodes/blob/master/LICENSE
   :alt: License
.. image:: http://hera.physchem.kth.se/~pycvodes/branches/master/htmlcov/coverage.svg
   :target: http://hera.physchem.kth.se/~pycvodes/branches/master/htmlcov
   :alt: coverage


`pycvodes <https://github.com/bjodah/pycvodes>`_ provides a
`Python <http://www.python.org>`_ binding to the
`Ordinary Differential Equation <https://en.wikipedia.org/wiki/Ordinary_differential_equation>`_
integration routines from `cvodes <https://computation.llnl.gov/casc/sundials/description/description.html#descr_cvodes>`_ in the
`SUNDIALS suite <https://computation.llnl.gov/casc/sundials/main.html>`_. ``pyvodes`` allows a user to numerically integrate
(systems of) differential equations. Note that routines for sensitivity analysis is not yet exposed in this binding (which makes
the functionality essentially the same as cvode). 

The following multistep methods are available:

- bdf
- adams

Note that bdf (as an implicit stepper) require a user supplied
callback for calculating the jacobian.

Documentation
-------------
Autogenerated API documentation is found `here <http://hera.physchem.kth.se/~pycvodes/branches/master/html>`_.

Installation
------------
Simplest way to install is to use the `conda package manager <http://conda.pydata.org/docs/>`_:

::

   $ conda install -c bjodah pycvodes pytest
   $ python -m pytest --pyargs pycvodes

tests should pass.

Binary distribution is available here:
`<https://anaconda.org/bjodah/pycvodes>`_

Source distribution is available here:
`<https://pypi.python.org/pypi/pycvodes>`_

Examples
--------
The classic van der Pol oscillator (see `examples/van_der_pol.py <examples/van_der_pol.py>`_)

.. code:: python

   >>> import numpy as np
   >>> from pycvodes import integrate_predefined  # also: integrate_adaptive
   >>> mu = 1.0
   >>> def f(t, y, dydt):
   ...     dydt[0] = y[1]
   ...     dydt[1] = -y[0] + mu*y[1]*(1 - y[0]**2)
   ... 
   >>> def j(t, y, Jmat, dfdt=None, fy=None):
   ...     Jmat[0, 0] = 0
   ...     Jmat[0, 1] = 1
   ...     Jmat[1, 0] = -1 - mu*2*y[1]*y[0]
   ...     Jmat[1, 1] = mu*(1 - y[0]**2)
   ...     if dfdt is not None:
   ...         dfdt[:] = 0
   ...
   >>> y0 = [1, 0]; dt0=1e-8; t0=0.0; atol=1e-8; rtol=1e-8
   >>> tout = np.linspace(0, 10.0, 200)
   >>> yout, info = integrate_predefined(f, j, y0, tout, atol, rtol, dt0,
   ...                                   method='bdf')
   >>> import matplotlib.pyplot as plt
   >>> series = plt.plot(tout, yout)
   >>> plt.show()  # doctest: +SKIP


.. image:: https://raw.githubusercontent.com/bjodah/pycvodes/master/examples/van_der_pol.png

For more examples see `examples/ <https://github.com/bjodah/pycvodes/tree/master/examples>`_, and rendered jupyter notebooks here:
`<http://hera.physchem.kth.se/~pycvodes/branches/master/examples>`_


License
-------
The source code is Open Source and is released under the simplified 2-clause BSD license. See `LICENSE <LICENSE>`_ for further details.

Contributors are welcome to suggest improvements at https://github.com/bjodah/pycvodes

Author
------
Bj√∂rn I. Dahlgren, contact:

- gmail address: bjodah
- kth.se address: bda
